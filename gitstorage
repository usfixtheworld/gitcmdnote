1)查看远程仓库
$ git remote  
$ git remote -v #显示远程仓库的URL

2）从远程仓库抓取与拉取你没有的数据
$ git fecth [remote-name] 
#执行完后会拥有远程仓库中所有分支的引用，可以随时和并或查看，不会自动合并或修改你当前工作，当准备好时候，必须手动将其合并入你的工作

$ git pull #会自动抓取数据并自动尝试合并所在的分支

3）推送到远程仓库
$ git push [remote-name] [branch-name]
#当想将本地master分支推送至服务器origin时（clone命令会自动设置好这两个名字），此命令可以将你所做的备份到服务器
$ git push origin master
#当和其他人协作，他人先推送到上游，然后你再推送，你的推送会被拒绝。你必须先把他们的工作拉取下来，并将其合并进入你的工作后才能推送

4）查看远程仓库
$ git remote show [remote-name]
#会列出远程仓库的url与跟踪的分支信息

5）添加远程仓库(不甚懂)
$ git remote add <shortname> <url>
$ git remote add pb https://github.com/usfixtheworld/gitcmdnote
$ git checkout -b pb/pbmaster
$ git fetch pb 

6）远程仓库的移除与重命名
#将pb重命名未paul 
$ git remote rename pb paul
$ git remote
#同样会修改远程分支名字，过去引用pb/master 现在为paul/master
$ git remote rm paul 

7）查看标签
$ git tag
#查看所有标签
$ git tag -l 'V1.8.5*'
#查看V1.8.5相关的标签

8）创建标签
#可以创建轻量标签（light weight）和附注标签(annotated)，轻量标签只是一个特定提交的引用，附注存储的是一个完整的对象，是可以被校验的。通常建议打附注标签，如果只想拥有一个临时的标#签，可使用轻量标签
#附注标签 -a 选项
$ git tag -a v1.4 -m 'my version 1.4'
$ git show v1.4

#轻量标签
$ git tag v1.4

#后期打标签
$ git log --pretty='%h %s'  #%H为HASH
$ git tag -a v1.2 gfceb02

9)共享标签
#默认情况下git push 不会将标签传送到远程仓库服务器，在创建标签后，需要显示的推送标签只共享服务器
$ git push origin [tagname]
$ git push orgin v1.5

#如果一次推送很多标签，可使用--tags标签
$git push origin --tags  
#会将所有的不在远程仓库的标签都传送到远程仓库


10）检出标签
#在git中并不能整的检出一个标签，因为他们不能向分支一样移动
#若想在工作目录与仓库中特定的标签版本一致，可以使用
$ git checkout -b [branch name] [tagname] 
#在特定的标签上创建一个新分支
$ git checkout -b version2 v2.0
#如果在这之后又进行了一次提交 ，version2 会因为改动向前移动了，那么version2分支就会和v2.0标签不同了，这是需要当心了。
