0)克隆
$ git clone https://github.com/usfixtheworld/gitcmdnote.git
$cd gitcmdnote

1)#开始跟踪文件
$touch GITCOMMAND
$ git add GITCOMMAND  

2).gitignore 添加不需要跟踪文件

3)#查看状态
$ git status 
$ git status -s  or  $ git status --short

4)查看状态 更详细内容
#查看当前工作目录文件和暂存区域快照之间的差异，即修改后没有暂存起来的变化内容
$ git diff
#查看已暂存的将要添加到下次提交的内容
$ git diff --staged or $ git diff --cached

5)git config
$ git config --global core.editor [编辑器]（gedit or vim)
$ git config --global user.username [Name]
$ git config --global user.email [Email]
$ git config -l

6)提交更新
$ git add GITCOMMAND or $ git add .
$ git commit  #默认提交git status 内容
$ git commit -v  #会将git diff内容输出，而不是git status
$ git commit -m "Fix bug for GITCOMMAND"  # 参数-m 将信息与命令行放在一起
$ git commit -v -m "Fix bug for GITCOMMAND" 

7)参数 -a 跳过暂存区，自动把所有已经跟踪过得文件暂存起来一起提交,如此就省掉了6)中的$ git add
$ git commit -a -m "SOME tips for files."

8)删除
$ git rm [filename] #从git项目中删除某文件，并且物理删除，以后就不会出现在未跟踪文件清单中了
$ git rm -f [filename] #如果删除前已经修改并且放到了暂存区
$ git rm --cache [filename]#仅从git仓库中删除（即从暂存区删除）不想再跟踪它，但保留在当前工作目录中，未物理删除。然后再添加到.gitignore.若很多文件，可以使用blob模式

9)对文件重命名
$ git mv GITCOMMAND  gitcmd
相当于执行三条命令
$ mv GITCOMMAND  gitcmd
$ git rm GITCOMMAND
$ git add gitcmd

10)查看提交历史
$ git log
$ git log -p -2 #仅显示最近两次提交
$ git log --stat  #每次提交的简略统计信息
$ git log --pretty="%h-%s" --author=usfixtheworld --since ='2020-02-01' --before='2020-02-02' --no-merges -t

11)--amend重新提交
$ git commit --amend  #因为操作失误，提交完发现漏掉几个文件没有添加或提交信息写错了。
#若上次以来文件未修改，那么快照不变，只修改了提交信息
#For example:
#提交后，发现忘记了没有暂存某文件，可如下操作
$ git commit -m 'Init commit'
$ git add forgotten_file
$ git commit --amend
最终将只有一个提交，第二次将代替第一次提交的结果

12)取消暂存的文件
$ git reset HEAD <filename> 

13)撤销对文件的修改
$ git checkout --<filename>
#这是一个危险的命令，对该文件的所有修改都会消失，你只是拷贝了另外一个文件覆盖它，除非你确实清楚你不想要这个文件了，否则不要使用这个命令。
