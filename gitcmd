0)克隆
$ git clone https://github.com/usfixtheworld/gitcmdnote.git
$cd gitcmdnote

1)#开始跟踪文件
$touch GITCOMMAND
$ git add GITCOMMAND  

2).gitignore 添加不需要跟踪文件

3)#查看状态
$ git status 
$ git status -s  or  $ git status --short

4)查看状态 更详细内容
#查看当前工作目录文件和暂存区域快照之间的差异，即修改后没有暂存起来的变化内容
$ git diff
#查看已暂存的将要添加到下次提交的内容
$ git diff --staged or $ git diff --cached

5)git config
$ git config --global core.editor [编辑器]（gedit or vim)
$ git config --global user.username [Name]
$ git config --global user.email [Email]
$ git config -l

6)提交更新
$ git add GITCOMMAND or $ git add .
$ git commit  #默认提交git status 内容
$ git commit -v  #会将git diff内容输出，而不是git status
$ git commit -m "Fix bug for GITCOMMAND"  # 参数-m 将信息与命令行放在一起
$ git commit -v -m "Fix bug for GITCOMMAND" 

7)参数 -a 跳过暂存区，自动把所有已经跟踪过得文件暂存起来一起提交,如此就省掉了6)中的$ git add
$ git commit -a -m "SOME tips for files."

8)删除
$ git rm [filename] #从git项目中删除某文件，并且物理删除，以后就不会出现在未跟踪文件清单中了
$ git rm -f [filename] #如果删除前已经修改并且放到了暂存区
$ git rm --cache [filename]#仅从git仓库中删除（即从暂存区删除）不想再跟踪它，但保留在当前工作目录中，未物理删除。然后再添加到.gitignore.若很多文件，可以使用blob模式

9)对文件重命名
$ git mv GITCOMMAND  gitcmd
相当于执行三条命令
$ mv GITCOMMAND  gitcmd
$ git rm GITCOMMAND
$ git add gitcmd

10)查看提交历史
$ git log
$ git log -p -2 #仅显示最近两次提交
$ git log --stat  #每次提交的简略统计信息
$ git log --pretty="%h-%s" --author=usfixtheworld --since ='2020-02-01' --before='2020-02-02' --no-merges -t

11)--amend重新提交
$ git commit --amend  #因为操作失误，提交完发现漏掉几个文件没有添加或提交信息写错了。
#若上次以来文件未修改，那么快照不变，只修改了提交信息
#For example:
#提交后，发现忘记了没有暂存某文件，可如下操作
$ git commit -m 'Init commit'
$ git add forgotten_file
$ git commit --amend
最终将只有一个提交，第二次将代替第一次提交的结果

12)取消暂存的文件
$ git reset HEAD <filename> 

13)撤销对文件的修改
$ git checkout --<filename>
#这是一个危险的命令，对该文件的所有修改都会消失，你只是拷贝了另外一个文件覆盖它，除非你确实清楚你不想要这个文件了，否则不要使用这个命令。

14)撤销提交
提交代码后，突然意识到这个提交有问题，应该撤销调，这时可以使用
$ git revert HEAD
上面命令的原理是，在当前提交后面，新增一次提交，抵消调上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。
git revert 只能抵消上一次提交，如果抵消多个提交，必须在命令行一次指定这些提交，比如抵消两个提交

$ git revert[倒数第一个提交][倒数第二个提交]

git revert 两个参数
--no-edit:执行时不打开默认编辑器，直接使用git自动生成的提交信息
--no-commit:只抵消暂存区和工作区的文件变化，不产生新的提交。

15）丢弃提交
如果希望以前的提交在历史中彻底消失,而不是被抵消掉,可以使用 git reset 命令,丢弃掉某个
提交之后的所有提交。
$ git reset [last good SHA]
git reset 的原理是,让最新提交的指针回到以前某个时点,该时点之后的提交都从历史中消失。

默认情况下, git reset 不改变工作区的文件(但会改变暂存区), --hard 参数可以让工作区里
面的文件也回到以前的状态。
$ git reset --hard [last good SHA]

执行 git reset 命令之后,如果想找回那些丢弃掉的提交,可以使用 git reflog 命令,具体做法参
考这里。不过,这种做法有时效性,时间长了可能找不回来。
