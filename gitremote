远程分支
1)#获得远程引用的完整列表
$ git ls-remote
$ git ls-remote origin
或者通过 $ git remote show($ git remote show origin) 获得远程分支的更多信息
2)会将origin/master新的位置拉下来到本地，用于本地master合并提交
$ git fetch origin 

3)推送
$ git push (remote) (branch)
$ git push origin serverfix
这里有些工作被简化了，serverfix分支名字展开为refs/heads/serverfix:refs/heads/serverfix
意味着，“推送本地的serverfix分支来更新远程仓库上的serverfix分支”
也可以运行 
$ git push origin serverfix:serverfix #“推送本地的serverfix分支,将其作为远程仓库上的serverfix分支”
如果不想让远程仓库上的分支叫做serverfix,可运行
$ git push origin serverfix:awesomebranch #来将本地的serverfix分支推送到远程仓库上的awesomebranch

要注意当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝），即不会有一个新的serverfix分支，只有一个
不可修改的origin/serverfix指针
可运行 $ git merge origin/serverfix 将这些工作合并到当前所在的分支。
如果想要在自己的serverfix分支上工作，可以将其建立在远程跟踪分支上
$git checkout -b serverfix origin/serverfix
这会给你一个用于工作的本地分支，并且起点位于origin/serverfix

4)跟踪分支
当克隆一个仓库时，它通常会自动地创建一个跟踪origin/master的master分支，然而，如果你需要的话，可以设置其他的跟踪分支--其他远程仓库上的跟踪分支，或者不跟踪master分支。最简单的方法是运行：
$ git checkout -b [branch] [remotename]/[branch]
这是一个非常常见的操作，所以git提供了--track快捷方式
$ git checkout --track origin/serverfix
会在本地自动创建serverfix分支，并跟踪origin/serverfix
如果本地分支和远程分支不使用相同的名字，可以增加一个不同的名字的本地分支
$ git checkout -b sf origin/serverfix
此时本地分支sf会自动从origin/serverfix拉取

设置已有的本地分支跟踪一个刚刚拉取的远程分支，或想要修改正在跟踪的上游分支，可以在任意时间使用-u 或者 -set-upstream-to 选项来运行git branch来显式设置
$ git branch -u origin/serverfix

5）上游快捷方式
当设置好跟踪分支，可以通过@{u}或@{upstream}快捷方式来引用它，所以当master分支跟踪origin/master时，如果愿意，可以使用
$ git merge @{u} 来取代 $ git merge origin/master

6)查看设置的所有跟踪分支，可以使用
$ git branch -vv
可以将所有本地分支列出来并且包含更多的信息：如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。
这写数字只是来自你最后一次从服务器拉取的数据，告诉你本地缓存的服务器数据。
如果统计最新的领先与落后数字，徐在运行此命令前抓取所有的远程仓库，可以如下
$ git fetch --all 
$ git branch -vv

7)拉取
git fetch从服务器拉取本地没有的数据，它并不修改工作目录下的内容，需要自行合并。git pull 在大多数情况下的含义是git fetch 紧跟一个git merge命令。如果有一个设置好了的跟踪分支，不管是显示的设置还是通过clone或checkout为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并入那个远程分支。由于git pull经常令人困惑，所以显示使用fetch和merge命令会更好一些。

8)删除远程分支
假设已经通过分支做完了所有的工作，并将其合并到了远程仓库的master（或其他稳定的代码分支）可以运行--delete选项的git push来删除远程分支。如在服务器上删除serverfix分支
$git push origin --delete serverfix
这个命令只是从服务器上移除这个指针，git服务器通常会保留数据一段时间，指导垃圾回收运行，所以不小心删除，统筹会很容易恢复。

9)变基
变基的基本准则：不要对你的仓库外有副本的分支执行变基
$ git checkout experiment
$ git rebase master
$ git checkout master
$ git merge experiment

如果存在3者
$git rebase --onto master client
$git checkout master
$git merge client

之后便可以删除合并后的分支
$git branch -d client


